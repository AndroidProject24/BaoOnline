apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.fernandocejas.frodo'
apply from: "$rootProject.projectDir/buildsystem/library.gradle"
apply from: "$rootProject.projectDir/buildsystem/secret.gradle"

def configuration = ext.configuration;
def library = ext.library;
def keyConf = ext;

android {
    compileSdkVersion configuration.compileSdkVersion
    buildToolsVersion configuration.buildToolsVersion
    defaultConfig {
        applicationId configuration.applicationId
        minSdkVersion configuration.minimumSdkVersion
        targetSdkVersion configuration.targetSdkVersion
        versionCode buildVersionCode()
        versionName buildVersionName()
    }
    signingConfigs {
        Key {
            try {
                storeFile file(keyConf.keystore)
                storePassword keyConf.keystorePass
                keyAlias keyConf.alias
                keyPassword keyConf.aliasPass
            }
            catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.Key
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
        applicationVariants.all { variant ->
            configApkFileName(variant, defaultConfig)
        }
    }
    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/DEPENDENCIES'
    }
    lintOptions {
        warning 'InvalidPackage'
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res-main',
                    file('src/main/res-screen')
                            .listFiles()
                            .each { res.srcDirs += it.path }
            ]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
@SuppressWarnings("GroovyAssignabilityCheck")
def configApkFileName(variant, defaultConfig) {
    variant.outputs.each { output ->
        if (variant.buildType.name == android.buildTypes.debug.name) {
            if (output.zipAlign) {
                def file = output.outputFile
                output.outputFile = new File(file.parentFile, variant.buildType.name + "_v"
                        + defaultConfig.versionName + "_"
                        + defaultConfig.versionCode
                        + ".apk")
            }
        } else if (variant.buildType.name == android.buildTypes.release.name) {
            if (output.zipAlign) {
                def file = output.outputFile
                output.outputFile = new File(file.parentFile, "BaoOnline_" + variant.buildType.name
                        + "_v" + defaultConfig.versionName + "_"
                        + defaultConfig.versionCode
                        + ".apk")
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':library')
    //----- Support Libs
    compile  "${library.supportCompat}"
    //----- Dagger
    compile  "${library.dagger}"
    apt      "${library.daggerCompiler}"
    provided "${library.javaxannotation}"
    //-----Jsoup
    compile "${library.jsoup}"
    //----- Rx
    compile  "${library.rxjava}"
    compile  "${library.rxandroid}"
    compile  "${library.rxbinding}"
    //-----TikXml
    compile  "${library.tikxml}"
    compile  "${library.tikxml_annotation}"
    compile  "${library.tikxml_core}"
    apt      "${library.tikxml_processor}"
}
